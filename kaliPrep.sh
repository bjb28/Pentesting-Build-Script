#!/bin/bash


#Update Kali before starting
echo -e  '\e[1;34m'"{::Starting Kali update before installs::}"'\e[0m'
sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade  && sudo apt-get -y autoclean && sudo apt-get -y autoremove

#Install Docker
echo -e  '\e[1;34m'"{::Installing Docker::}"'\e[0m'
if [ ! -f /etc/apt/trusted.gpg.d/docker.gpg ]; then
	sudo apt-get remove docker docker.io containerd runc 1>/dev/null
	sudo apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 1>/dev/null
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --no-default-keyring --keyring=gnupg-ring:/etc/apt/trusted.gpg.d/docker.gpg --import 
	sudo chmod 644 /etc/apt/trusted.gpg.d/docker.gpg
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian buster stable" 1>/dev/null
	sudo apt-get -y update 1>/dev/null
	sudo apt-get -y install docker-ce docker-ce-cli containerd.io
	sudo usermod -aG docker $USER 1>/dev/null
else
	echo "Docker already installed!"
fi

#Pull Planka Utility Docker
echo -e '\e[1;34m'"{::Pull Planka Utility Docker::}"'\e[0m'
sudo docker pull bjb28/planka-utility

#Pull Planka Utility Docker
echo -e '\e[1;34m'"{::Pull Planka Utility Docker::}"'\e[0m'
sudo docker pull bjb28/planka-utility

#Build Tools Directories (both in root and OPT depending on user preference)
echo -e  '\e[1;34m'"{::Creating linked Tool directories ~/Tools and /OPT/Tools::}"'\e[0m'
if [[ ! -d "/opt/Tools" ]]; then 
	echo "Making Directory and Links"
	sudo mkdir -p /opt/Tools
	ln -s /opt/Tools /home/$USER/
else
	echo "Already exists!"
fi 

#Install Sublime Text Editor
echo -e  '\e[1;34m'"{::Installing Sublime Text Editor::}"'\e[0m'
dkpg -s sublime-text &> /dev/null
if [ $? -eq 0 ]; then
	echo "Sublime already installed!"
else
	sudo curl -sSfL https://download.sublimetext.com/sublimehq-pub.gpg | sudo gpg --no-default-keyring --keyring=gnupg-ring:/etc/apt/trusted.gpg.d/sublimehq-pub.gpg --import
	sudo chmod 644 /etc/apt/trusted.gpg.d/sublimehq-pub.gpg
	echo -e  "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
	sudo apt-get -y update && sudo apt -y install sublime-text
fi

#Install VS Code
echo -e  '\e[1;34m'"{::Installing VS Code::}"'\e[0m'
if ! command -v code &> /dev/null; then
	wget https://code.visualstudio.com/sha/download\?build=stable\&os=linux-deb-x64 -O vscode.deb
	sudo apt install ./vscode.deb -y
	rm vscode.deb
else
	echo "VS Code already installed!"
fi

# Apt installs
echo -e  '\e[1;34m'"{::Installing APT packages::}"'\e[0m'
packageList="thunderbird python3-certbot-apache flameshot python3-pip seclists curl bloodhound enum4linux gobuster nbtscan nikto nmap onesixtyone oscanner smbclient smbmap smtp-user-enum sslscan tnscmd10g whatweb crackmapexec bless eyewitness spice-vdagent filezilla terminator"
echo -e  '\e[1;34m'"{::Installing tools/dependencies avaliable with APT::}"'\e[0m'
for packageName in $packageList; do
	if dpkg -s $packageName &>/dev/null; then
		echo "$packageName Already Installed!"
	else
		sudo apt-get -y install $packageName
	fi
done

# PIP installs
echo -e  '\e[1;34m'"{::Installing PIP modules::}"'\e[0m'
export PATH=$PATH:/home/$USER/.local/bin
pipList="argparse pyasn1 pycryptodomex pyOpenSSL ldapdomaindump flask ldap3 tox colorama toml appdirs pipx pipenv impacket"
for packageName in $pipList; do
	if pip3 show $packageName &>/dev/null; then
		echo "$packageName Already Installed!"
	else
		pip3 install $packageName
	fi
done

# sudo git clones of Tools
echo -e  '\e[1;34m'"{::Performing sudo git clones of tools from GitHub::}"'\e[0m'
pushd /opt/Tools >/dev/null
if [[ ! -d "/opt/Tools/AutoRecon" ]]; then
	sudo git clone https://github.com/Tib3rius/AutoRecon.git
else
	echo "AutoRecon already cloned!"
fi
if [[ ! -d "/opt/Tools/nishang" ]]; then
	sudo git clone https://github.com/samratashok/nishang.git
else
	echo "nishang already cloned!"
fi
if [[ ! -d "/opt/Tools/AutoBlue-MS17-010" ]]; then
	sudo git clone https://github.com/3ndG4me/AutoBlue-MS17-010.git
else
	echo "AutoBlue-MS17-010 already cloned!"
fi
if [[ ! -d "/opt/Tools/Empire" ]]; then
	sudo git clone https://github.com/BC-SECURITY/Empire.git
else
	echo "Empire already cloned!"
fi
if [[ ! -d "/opt/Tools/PowerSploit" ]]; then
	sudo git clone https://github.com/PowerShellMafia/PowerSploit.git
else
	echo "PowerSploit already cloned!"
fi
if [[ ! -d "/opt/Tools/PEAS" ]]; then
	sudo git clone https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite.git PEAS
else
	echo "WinPEAS/LinPEAS already cloned!"
fi
if [[ ! -d "/opt/Tools/Sherlock" ]]; then
	sudo git clone https://github.com/rasta-mouse/Sherlock.git
else
	echo "Sherlock already cloned!"
fi
if [[ ! -d "/opt/Tools/Watson" ]]; then
	sudo git clone https://github.com/rasta-mouse/Watson.git
else
	echo "Watson already cloned!"
fi
if [[ ! -d "/opt/Tools/linuxprivchecker" ]]; then
	sudo git clone https://github.com/sleventyeleven/linuxprivchecker.git
else
	echo "linuxprivchecker already cloned!"
fi
if [[ ! -d "/opt/Tools/LinEnum" ]]; then
	sudo git clone https://github.com/rebootuser/LinEnum.git
else
	echo "LinEnum already cloned!"
fi
if [[ ! -d "/opt/Tools/JAWS" ]]; then
	sudo git clone https://github.com/411Hall/JAWS.git
else
	echo "JAWS already cloned!"
fi
if [[ ! -d "/opt/Tools/impacket" ]]; then
	sudo git clone https://github.com/SecureAuthCorp/impacket.git
else
	echo "impacket already cloned!"
fi
if [[ ! -d "/opt/Tools/nmap-vulners" ]]; then
	sudo git clone https://github.com/vulnersCom/nmap-vulners
else
	echo "nmap-vulners already cloned!"
fi
if [[ ! -d "/opt/Tools/PayloadsAllTheThings" ]]; then
	sudo git clone https://github.com/swisskyrepo/PayloadsAllTheThings.git
else
	echo "PayloadsAllTheThings already cloned!"
fi
if [[ ! -d "/opt/Tools/BloodHound" ]]; then
	sudo git clone https://github.com/BloodHoundAD/BloodHound.git
else
	echo "Bloodhound Collectors already cloned!"
fi
if [[ ! -d "/opt/Tools/kerbrute" ]]; then
	sudo git clone https://github.com/ropnop/kerbrute.git
else
	echo "kerbrute already cloned!"
fi
if [[ ! -d "/opt/Tools/Windows-Exploit-Suggester" ]]; then
	sudo git clone https://github.com/AonCyberLabs/Windows-Exploit-Suggester.git
else
	echo "Windows-Exploit-Suggester already cloned!"
fi
if [[ ! -d "/opt/Tools/dirsearch" ]]; then
	sudo git clone https://github.com/maurosoria/dirsearch.git
else
	echo "dirsearch already cloned!"
fi
if [[ ! -d "/opt/Tools/LFISuite" ]]; then
	sudo git clone https://github.com/D35m0nd142/LFISuite.git
else
	echo "LFISuite already cloned!"
fi
if [[ ! -d "/opt/Tools/SharpShooter" ]]; then
	sudo git clone https://github.com/mdsecactivebreach/SharpShooter.git
else
	echo "SharpShooter already cloned!"
fi
if [[ ! -d "/opt/Tools/demiguise" ]]; then
	sudo git clone https://github.com/nccgroup/demiguise.git
else
	echo "demiguise already cloned!"
fi
if [[ ! -d "/opt/Tools/morphHTA" ]]; then
	sudo git clone https://github.com/vysecurity/morphHTA.git
else
	echo "morphHTA already cloned!"
fi
if [[ ! -d "/opt/Tools/Inveigh" ]]; then
	sudo git clone https://github.com/Kevin-Robertson/Inveigh.git
else
	echo "Inveigh already cloned!"
fi
if [[ ! -d "/opt/Tools/nlzr" ]]; then
	sudo git clone https://github.com/noahpowers/nlzr.git
else
	echo "nlzr already cloned!"
fi
if [[ ! -d "/opt/Tools/ServerSetup" ]]; then
	sudo git clone https://github.com/noahpowers/ServerSetup.git
else
	echo "ServerSetup already cloned!"
fi
if [[ ! -d "/opt/Tools/gnmap-parser" ]]; then
	sudo git clone https://github.com/jasonjfrank/gnmap-parser.git
else
	echo "gnmap-parser already cloned!"
fi
if [[ ! -d "/opt/Tools/Ghostpack-CompiledBinaries" ]]; then
	sudo git clone https://github.com/r3motecontrol/Ghostpack-CompiledBinaries.git
else
	echo "Ghostpack-CompiledBinaries already cloned!"
fi
if [[ ! -d "/opt/Tools/CACTUSTORCH" ]]; then
	sudo git clone https://github.com/mdsecactivebreach/CACTUSTORCH.git
else
	echo "CACTUSTORCH already cloned!"
fi
if [[ ! -d "/opt/Tools/TikiTorch" ]]; then
	sudo git clone https://github.com/rasta-mouse/TikiTorch.git
else
	echo "TikiTorch already cloned!"
fi
popd >/dev/null


# Installing Empire V3
echo -e  '\e[1;34m'"{::Installing Empire V3::}"'\e[0m'
pushd /opt/Tools/Empire >/dev/null
echo -e  "password" | sudo /opt/Tools/Empire/setup/install.sh &>/dev/null
popd >/dev/null

# Installing Evil-WinRM
echo -e  '\e[1;34m'"{::Installing Evil-WinRM::}"'\e[0m'
sudo gem install evil-winrm 1>/dev/null

# Extracting Bloodhound
echo -e  '\e[1;34m'"{::Extracting Bloodhound Ingestors::}"'\e[0m'
if [ -d "/opt/Tools/Bloodhound/Collectors" ]; then 
	pushd /opt/Tools/BloodHound/ >/dev/null
	sudo mv ./Collectors/*.* ./
	sudo rm -rf Collectors docs BloodHoundExampleDB.db
	popd >/dev/null
else
	echo "Already extracted!"
fi

# Install Veil Evasion
echo -e  '\e[1;34m'"{::Installing Veil 3.0::}"'\e[0m'
if dpkg -s veil &>/dev/null; then
	echo "Veil already installed!"
else
	sudo apt-get -y install veil
	sudo /usr/share/veil/config/setup.sh --force --silent
fi


# Install Nmap Vulners script
echo -e  '\e[1;34m'"{::Copying Vulners.nse to Nmap Scripts directory and update db::}"'\e[0m'
sudo cp /opt/Tools/nmap-vulners/vulners.nse /usr/share/nmap/scripts
sudo nmap --script-updatedb

#Extract Rockyou
echo -e  '\e[1;34m'"{::Extracting Rockyou::}"'\e[0m'
if [ -f "/usr/share/wordlists/rockyou.txt.gz" ]; then
	sudo gzip -d /usr/share/wordlists/rockyou.txt.gz
else
	echo "Already extracted!"
fi

# Update WPScan and Searchsploit
echo -e  '\e[1;34m'"{::Updating WPScan::}"'\e[0m'
wpscan --update
echo -e  '\e[1;34m'"{::Updating Searchsploit::}"'\e[0m'
searchsploit --update 1>/dev/null

#creating pastable file (This generates a file tree map of /usr/share/wordlists for easy
#cutting and pasting into xyz tool for input...
echo -e  '\e[1;34m'"{::Creating File list pastable::}"'\e[0m'

echo '/usr/share/wordlists/wfuzz/general/common.txt
/usr/share/wordlists/wfuzz/general/mutations_common.txt
/usr/share/wordlists/wfuzz/general/euskera.txt
/usr/share/wordlists/wfuzz/general/big.txt
/usr/share/wordlists/wfuzz/general/admin-panels.txt
/usr/share/wordlists/wfuzz/general/extensions_common.txt
/usr/share/wordlists/wfuzz/general/http_methods.txt
/usr/share/wordlists/wfuzz/general/catala.txt
/usr/share/wordlists/wfuzz/general/megabeast.txt
/usr/share/wordlists/wfuzz/general/spanish.txt
/usr/share/wordlists/wfuzz/general/test.txt
/usr/share/wordlists/wfuzz/general/medium.txt
/usr/share/wordlists/wfuzz/Injections/bad_chars.txt
/usr/share/wordlists/wfuzz/Injections/XML.txt
/usr/share/wordlists/wfuzz/Injections/All_attack.txt
/usr/share/wordlists/wfuzz/Injections/Traversal.txt
/usr/share/wordlists/wfuzz/Injections/SQL.txt
/usr/share/wordlists/wfuzz/Injections/XSS.txt
/usr/share/wordlists/wfuzz/others/names.txt
/usr/share/wordlists/wfuzz/others/common_pass.txt
/usr/share/wordlists/wfuzz/stress/uri_hex.txt
/usr/share/wordlists/wfuzz/stress/alphanum_case.txt
/usr/share/wordlists/wfuzz/stress/char.txt
/usr/share/wordlists/wfuzz/stress/doble_uri_hex.txt
/usr/share/wordlists/wfuzz/stress/test_ext.txt
/usr/share/wordlists/wfuzz/stress/alphanum_case_extra.txt
/usr/share/wordlists/wfuzz/vulns/sunas.txt
/usr/share/wordlists/wfuzz/vulns/weblogic.txt
/usr/share/wordlists/wfuzz/vulns/sql_inj.txt
/usr/share/wordlists/wfuzz/vulns/dirTraversal.txt
/usr/share/wordlists/wfuzz/vulns/dirTraversal-win.txt
/usr/share/wordlists/wfuzz/vulns/vignette.txt
/usr/share/wordlists/wfuzz/vulns/fatwire.txt
/usr/share/wordlists/wfuzz/vulns/dirTraversal-nix.txt
/usr/share/wordlists/wfuzz/vulns/fatwire_pagenames.txt
/usr/share/wordlists/wfuzz/vulns/iis.txt
/usr/share/wordlists/wfuzz/vulns/coldfusion.txt
/usr/share/wordlists/wfuzz/vulns/domino.txt
/usr/share/wordlists/wfuzz/vulns/oracle9i.txt
/usr/share/wordlists/wfuzz/vulns/iplanet.txt
/usr/share/wordlists/wfuzz/vulns/tomcat.txt
/usr/share/wordlists/wfuzz/vulns/cgis.txt
/usr/share/wordlists/wfuzz/vulns/websphere.txt
/usr/share/wordlists/wfuzz/vulns/jrun.txt
/usr/share/wordlists/wfuzz/vulns/tests.txt
/usr/share/wordlists/wfuzz/vulns/sharepoint.txt
/usr/share/wordlists/wfuzz/vulns/frontpage.txt
/usr/share/wordlists/wfuzz/vulns/netware.txt
/usr/share/wordlists/wfuzz/vulns/apache.txt
/usr/share/wordlists/wfuzz/webservices/ws-dirs.txt
/usr/share/wordlists/wfuzz/webservices/ws-files.txt'>>/home/$USER/Desktop/Pastable.txt;



#Run Firefox extensions script

if [ -f ./Firefox_extensions.sh ]; then
	echo -e  '\e[1;34m'"{::Installing Firefox Extensions::}"'\e[0m'
	/bin/bash ./Firefox_extensions.sh
fi

# Indicate the user may need to restart Kali. This allows the user to have permission to use Docker.
echo -e '\e[1;31;43m'"You may need to restart Kali for all changes to take place."'\e[0m'